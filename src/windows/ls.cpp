#include <filesystem>
#include <bits/stdc++.h>
#include <list>
#include "../../include/color.hpp"
namespace fs = std::filesystem;using namespace std;int main(int argc, char* argv[]){cin.tie(0);cout.tie(0);string cur_path = fs::current_path().string(); bool only_dir = false; bool only_file = false; int argco = argc++; bool df = false; std::list<string> folders{}; std::list<string> files{};for (int i=1; i<argco; ++i){if (string(argv[i]).find("-")!=0){cur_path = argv[i];}if (string(argv[i]) == "-d" or string(argv[i]) == "--directory") {only_dir = true;}if (string(argv[i]) == "-f" or string(argv[i]) == "--file") {only_file = true;}if (string(argv[i]) == "-df" or string(argv[i]) == "--directory-first") {df = true;}}for (const auto & entry : fs::directory_iterator(cur_path)){if (only_dir){if (fs::is_directory(entry.path())){ std::cout << dye::aqua(entry.path().filename().string()) << "\n";}}else if (only_file) {if (fs::is_regular_file(entry.path()) and fs::is_regular_file(entry.path()) and entry.path().filename().string().find(".exe")>256){std::cout << dye::red(entry.path().filename().string()) << "\n";}if (fs::is_regular_file(entry.path()) and fs::is_regular_file(entry.path()) and entry.path().filename().string().find(".exe")<256){std::cout << dye::green(entry.path().filename().string()) << "\n";}}else if (df){for (const auto & sf : fs::directory_iterator(cur_path)){if (fs::is_directory(sf.path())){folders.push_back(sf.path().filename().string());}if (fs::is_regular_file(sf.path())){files.push_back(sf.path().filename().string());}}for (const string & sfs : folders){std::cout << dye::aqua(sfs) << "\n";}for (const string & sfss : files){if (sfss.find(".exe")>256){std::cout << dye::red(sfss) << "\n";}if (sfss.find(".exe")<256){std::cout << dye::green(sfss) << "\n";}}break;}else {if (fs::is_directory(entry.path())){std::cout << dye::aqua(entry.path().filename().string()) << "\n";}if (fs::is_regular_file(entry.path()) and entry.path().filename().string().find(".exe")>256){std::cout << dye::red(entry.path().filename().string()) << "\n";}if (fs::is_regular_file(entry.path()) and entry.path().filename().string().find(".exe")<256){std::cout << dye::green(entry.path().filename().string()) << "\n";}}}return 0;}